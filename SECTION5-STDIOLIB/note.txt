5.3 标准输入/输出/出错
头文件<stdio.h>预定义了三个文件指针：stdin/stdout/stderr引用标准输入/输出/出错，用以支持带缓冲的io。
标准io支持三种类型的缓冲：
（1）全缓冲：只有在填满标准io缓冲区后才进行实际的io操作，对与驻留在磁盘上的文件通常由标准io库实施全缓冲。在执行第一次io操作时，相关标准io函数调用malloc（）获得需要的缓冲区。
术语冲洗（flush）描述缓冲区的写操作，缓冲区由标准io例程自动冲洗（例如当填满一个缓冲区时，或调用fflush（）函数冲洗一个流时）。
（2）行缓冲：在这种情况下，当输入或输出遇到换行符时，则执行io操作，这允许我们一次输出一个字符（如fputc（）），但只有在写了一行之后才进行实际的io操作。当流涉及一个终端时，通常使用行缓冲。
行缓冲有两个限制：
1）:标准io库用于收集每一行的缓冲区的长度是固定的，所以只要填满缓冲区，即使没有换行符，也进行io操作。
2）：任何时候只要通过io库要求从（a）一个不带缓冲的流（b）一个行缓冲的流（要求从内核取得数据）得到输入数据，那么会造成冲洗所有行缓冲输出流。
（3）不带缓冲：函数不对字符进行缓冲存储。如标准出错stderr通常不带缓冲，这使得出错信息可以尽快显示。
注：带缓冲的io，其目的在于降低读写次数。通常，涉及终端设备（交互式设备）的文件流是行缓冲的，否则是全缓冲的，标准出错是不带缓冲的。

5.6 读和写流
一旦打开了流，则可在三种不同类型的非格式化io中选择：
1）每次一个字符的io；
2）每次一行的io；
3）直接io。


